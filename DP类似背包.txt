http://acm.hdu.edu.cn/showproblem.php?pid=2955
dp题关键还是写出转移方程。
dp[j] 表示偷得 j 块钱的时候不被抓的概率；
那么方程就可以这样写了： dp[j] = max( dp[j], dp[ j - mm[i] ] * (1-pp[i]) );



#include<stdio.h>  
#include<string.h> 
#include<algorithm> 
using namespace std;
double dp[10000];  
int mm[1000];   //钱  
double pp[1000];// 概率  
 
int main()  
{  
    int cas,n,i,j,sum;  
    double p;  
    scanf("%d",&cas);  
    while(cas--)  
    {  
        scanf("%lf %d",&p,&n);  
        for(i=0,sum=0; i<n; i++)  
        {  
            scanf("%d %lf",&mm[i],&pp[i]);  
            sum += mm[i];  
        }  
        memset(dp,0,sizeof(dp));  
        dp[0] = 1;  
        for(i=0; i<n; i++)  
            for(j=sum; j>=mm[i]; j--)  
                dp[j] = max(dp[j],dp[j-mm[i]] * (1-pp[i]));  
                //dp[i][j]=max(dp[i-1][j],dp[i-1][j-s[i]]*(1-pp[i]));
                //为了节省空间，改成一维，节省空间 
          for(i=sum; i>=0; i--)  
          {  
              if(dp[i]>=(1-p))  
              {  
                  printf("%d\n",i);  
                  break;  
              }  
          }  
    }  
    return 0;  
}  