#include<string.h>
#include<stdio.h>
#include<queue>
using namespace std;
inline int Max(int a,int b){return a>b?a:b;}
inline int Min(int a,int b){return a<b?a:b;}
#define N 205
#define inf 10000000
int n,m, K;

bool Inmap(int x,int y){
    if(x<0 || x>=n || y<0 || y>=m)return false;
    return true;
}

int map[N][N], step[4][2] = {0,1,0,-1,1,0,-1,0};
int dis[N][N][1<<4];
bool inq[N][N][1<<4];

void spfa(int fx, int fy){
    int i, j;
    for(i=0;i<n;i++)
        for(j=0;j<m;j++)
            for(int k=0;k<(1<<K);k++)
                dis[i][j][k] = inf;
    queue<int>qx ,qy ,hehe;
    memset(inq, 0, sizeof(inq));

    qx.push(fx), qy.push(fy);
    if(map[fx][fy]==-2)    hehe.push(0);
    else{ hehe.push( 1<<map[fx][fy]);dis[fx][fy][1<<map[fx][fy]] = 0;}

    dis[fx][fy][0] = 0;


    while(!qx.empty()){
        int x = qx.front(), y = qy.front(), zuosi = hehe.front();
        qx.pop(); qy.pop(); hehe.pop();
        inq[x][y][zuosi] = 0;
        for(i = 0; i<4; i++)
        {
            int nowx = x + step[i][0], nowy = y + step[i][1];
            if(map[nowx][nowy] == -1 || !Inmap(nowx,nowy))continue;
            int lala = zuosi;
            if(map[nowx][nowy]>=0 && (zuosi & 1<<map[nowx][nowy] )==0)
                lala += 1<<map[nowx][nowy];

            if(dis[nowx][nowy][lala] > dis[x][y][zuosi]+1)
            {

                dis[nowx][nowy][lala] = dis[x][y][zuosi]+1;
                if(inq[nowx][nowy][lala] == 0 && lala != (1<<K)-1)
                {
                    inq[nowx][nowy][lala] = 1;
                    qx.push(nowx);qy.push(nowy);
                    hehe.push(lala);
                }
            }
        }
    }
}
int main(){
    int i, j;
    int sx, sy;
    while(scanf("%d %d",&n,&m), n){
        sx = sy = -1;
        for(i=0;i<n;i++)
        {
            char s[N];scanf("%s",s);
            for(j=0;j<m;j++)
                if(s[j]=='#')map[i][j] = -1;
                else if(s[j]=='@'){sx = i, sy = j; map[i][j] = -2;}
                else map[i][j] = -2;
        }
        scanf("%d",&K);
        bool woca = false;
        for(i=0;i<K;i++)
        {
            int x,y;scanf("%d %d",&x,&y); 
            x--, y--;
            if(map[x][y] ==-1) woca = true;
            if(map[x][y]>=0){i--,K--;continue;}
            map[x][y] = i;
        }
        if(woca || sx == -1){printf("-1\n");continue;}
        spfa(sx,sy);
        int ans = inf;
        for(i=0;i<n;i++)
            for(j=0;j<m;j++)
                if(map[i][j] >=0)
                    ans = Min(ans, dis[i][j][(1<<K)-1]);
        if(ans == inf)ans=-1;
        printf("%d\n",ans);
    }
    return 0;
}
/*
2 3
##@
#.#
1
2 2

4 4
#@##
....
####
....
2
2 1
2 4

4 4
#@##
....
####
....
4
2 1
2 2
2 3
2 4

4 4
#@##
..#.
####
....
4
2 1
2 2
2 3
2 4

4 4
#@##
..#.
#.##
....
4
2 1
2 2
4 3
4 4

4 4
#@##
..#.
#.##
....
4
2 1
2 1
2 1
2 1

4 1
#
@
#
.
4
2 1
2 1
2 1
2 1

10 10
########@#
####.....#
###.####.#
#.#.####..
#.#.##.##.
#...#...#.
##.#..#.#.
##...#..#.
####.##.#.
####......
4
3 4
4 2
10 10
2 5

4 3
#@.
.##
.##
.##
3
1 2
1 2
1 3

3 3
#..
#..
@.#
2
3 1
1 3

1 1
@

2 4
.#.#
.@.#
4
1 1
1 3
2 1
2 3




*/

#include<queue>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int INF = 0x3f3f3f3f;
const int MAXN = 110;

int n , m , k;
int dir[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
char mat[MAXN][MAXN];

struct Node{
	int x;
	int y;
	int step;
};
Node start;
Node node[5]; 

bool isOk(int x , int y){
	if(x >= 1 && x <= n && y >= 1 && y <= m)
		return true;
	return false;
}

int bfs(Node begin , Node end){

    queue<Node>q;
	bool vis[MAXN][MAXN];
	memset(vis , false , sizeof(vis));
	begin.step = 0;
	q.push(begin);
	vis[begin.x][begin.y] = true;

	while(!q.empty()){
		Node tmp = q.front();
		q.pop();
		if(tmp.x == end.x && tmp.y == end.y)
			return tmp.step;
		for(int i = 0 ; i < 4 ; i++){
			int x = tmp.x+dir[i][0];
			int y = tmp.y+dir[i][1];
			if(isOk(x , y) && !vis[x][y] && mat[x][y] == '.'){
				q.push((Node){x , y , tmp.step+1});
				vis[x][y] = true;
			}
		}
	}
	return INF;
}

void solve(){
    int tmp[5];
	int ans = INF;
	for(int i = 0 ; i < k ; i++)
		tmp[i] = i+1;

    int step = bfs(start , node[tmp[0]]);
    for(int i = 1 ; i < k ; i++) 
		step += bfs(node[tmp[i-1]] , node[tmp[i]]);
    ans = min(ans , step); 

	while(next_permutation(tmp , tmp+k)){
		int step = bfs(start , node[tmp[0]]);
		for(int i = 1 ; i < k ; i++) 
			step += bfs(node[tmp[i-1]] , node[tmp[i]]);
		ans = min(ans , step); 
	}
	printf("%d\n" , ans == INF ? -1 : ans);
}

int main(){
    while(scanf("%d%d%*c" , &n , &m) && n+m){
		for(int i = 1 ; i <= n ; i++){
			for(int j = 1 ; j <= m ; j++){
                scanf("%c" , &mat[i][j]);
                if(mat[i][j] == '@'){
					start = (Node){i , j , 0};
				}
			}
			getchar();
		}
        scanf("%d" , &k);
		for(int i = 1 ; i <= k ; i++)
			scanf("%d%d" , &node[i].x , &node[i].y);
		solve();
	}
	return 0;
}

