可是思路明明很简单，这题是用BFS做的，可是不能紧紧标记一个点是否已经访问过，这样直接WA，因为访问过的不符合条件的点，很可能是因为转了太多的弯，但完全有可能存在转的弯比较少的路径在之后访问该点，所以vis[][]数组是用来保存访问过该点的最少的转弯次数，这样，只要访问该点，该点的转弯次数小于之前访问该店的最小转弯次数，则可以入队
#include<iostream>  
#include<string>  
#include<cstring>  
#include<algorithm>  
#include<cstdio>  
#include<queue>  
using namespace std; 
 
struct node{ 
    int x,y; 
    int d; 
    int k; 
}st,rt,ne; 
 
int n,m; 
int map[1005][1005]; 
int num[1005][1005]; 
int dx[4]={0,0,1,-1}; 
int dy[4]={1,-1,0,0}; 
 
bool bfs(int x1,int y1,int x2,int y2){ 
    if(map[x1][y1]!=map[x2][y2]||!map[x1][y1])
	return false; 
    for(int i=1;i<=n;++i) 
        for(int j=1;j<=m;++j) 
            num[i][j]=1000; 
    queue<node> q; 
    st.x=x1, st.y=y1, st.k=0, st.d=-1; 
    num[x1][y1]=0; 
    q.push(st); 
    while(!q.empty()){ 
        rt=q.front(); q.pop(); 
        for(int i=0;i<4;++i){ 
            ne=rt; 
            ne.x+=dx[i]; 
            ne.y+=dy[i]; 
            if(ne.x<=0||ne.y<=0||ne.x>n||ne.y>m)
			continue; 
            if(ne.d!=i)
			ne.k++; 
			
            ne.d=i;  
            if(ne.k>3)continue;      
            if(ne.x==x2&&ne.y==y2)return true;  
            if(map[ne.x][ne.y])continue; 
            if(ne.k<num[ne.x][ne.y]){ 
                num[ne.x][ne.y]=ne.k; 
                q.push(ne); 
            } 
        } 
    } 
    return false; 
} 
 
int main(){ 
    while(~scanf("%d%d",&n,&m)&&(n||m)){ 
        for(int i=1;i<=n;++i) 
            for(int j=1;j<=m;++j) 
                scanf("%d",&map[i][j]); 
        int q; 
		scanf("%d",&q); 
        while(q--){ 
            int x1,y1,x2,y2; 
            scanf("%d%d%d%d",&x1,&y1,&x2,&y2); 
            if(bfs(x1,y1,x2,y2)) 
			cout<<"YES"<<endl; 
            else
            cout<<"NO"<<endl;
        } 
    } 
    return 0; 
}