#include <iostream>
#include <queue>
using namespace std;
const int MAX = 20 + 5;
char map[MAX][MAX];
int point[4][2] = {-1,0,0,-1,1,0,0,1};//上 左 下 右
struct Node
{
    int x;
    int y;
    int step;
    friend bool operator< (const Node &a,const Node &b)
    {
        return a.step > b.step;
    }
};
int judge(Node a_k,int i_k)
{
    if(map[a_k.x][a_k.y] == '|')
    {
        if(i_k%2 == 0)//上下走
        {
            if(a_k.step % 2 == 0)//变
            {
                return 0;
            }
            else//不变
            {
                return 1;
            }
        }
        else//左右走
        {
            if(a_k.step % 2 == 0)//变
            {
                return 1;
            }
            else//不变
            {
                return 0;
            }
        }
    }
    else
    {
        if(map[a_k.x][a_k.y] == '-')
        {
            if(i_k%2 == 0)//上下走n
            {
                if(a_k.step%2 == 0)//变
                {
                    return 1;
                }
                else//不变
                {
                    return 0;
                }
            }
            else//左右走
            {
                if(a_k.step%2 == 0)//变
                {
                    return 0;
                }
                else//不变
                {
                    return 1;
                }
            }
        }
    }
}
int x,y;
int BFS(Node a,Node b)
{
    priority_queue <Node> q;
    a.step = 0;
    q.push(a);
    map[a.x][a.y] = '*';
    while(!q.empty())
    {
        Node mid;
        mid = q.top ();
        if(mid.x== b.x && mid.y == b.y)
        {
            cout<<mid.step<<endl;
            return 0;
        }
        mid.step++;
        q.pop();
        int i;
        for(i=0;i<4;i++)
        {
            a.x = mid.x + point[i][0];
            a.y = mid.y + point[i][1];
            a.step = mid.step;
            if(a.x <=x && a.y <=y && a.x >= 1 && a.y >= 1 && map[a.x][a.y] != '*')
            {
                if(map[a.x][a.y] == '.' || map[a.x][a.y] == 'T')
                {
                    map[a.x][a.y] = '*';
                    q.push(a);
                }
                else 
                {
                    if(map[a.x][a.y] == '|' || map[a.x][a.y] == '-')
                    {
                        if(judge(a,i))
                        {
                            a.x = a.x + point[i][0];
                            a.y = a.y + point[i][1];
                            if( map[a.x][a.y] != '*')
                            {
                                if(map[a.x][a.y] == '.' || map[a.x][a.y] == 'T')
                                {
                                    map[a.x][a.y] = '*';//不用vis数组 
                                    q.push (a);
                                }
                            }
                        }
                        else
                        {
                            q.push (mid);//小心不要写成q.push(a)
                        }
                    }
                }
            }
        }
    }
}
int main()
{
    while(cin>>x>>y)
    {
        memset(map,0,sizeof(map));
        int i,j;
        Node s,e;
        for(i=1;i<=x;i++)
        {
            for(j=1;j<=y;j++)
            {
                cin>>map[i][j];
                if(map[i][j] == 'S')
                {
                    s.x = i;
                    s.y = j;
                }
                if(map[i][j] == 'T')
                {
                    e.x = i;
                    e.y = j;
                }
            }
        }
        BFS(s,e);
    }
    return 0;
}
桥可以走多次，走过的注意变成*