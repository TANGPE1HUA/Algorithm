#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;
const int N = 210;
int n,m;
int head[N],son[N];
int w[N];
int dp[N][N];

int dfs(int fa)
{
    int i,j,k;
    int tot = 1;
    dp[fa][1] = w[fa];
    for(i = son[fa]; i != -1; i = head[i])
    {
        tot += dfs(i);  //剪枝，每次只用循环到当前能达到的最大值。 
        for(j = tot; j >= 1; j--)
            for(k = 1; k+j <= tot+1; k++)
                dp[fa][j+k] = max(dp[fa][j+k], dp[fa][j]+dp[i][k]);
    }
    return tot;
}

int main()
{
    int i,j,k;
    while(scanf("%d%d", &n, &m), n+m)
    {
        memset(son, -1, sizeof(son));
        w[0] = 0;
        for(i = 1; i <= n; i++) 
        {
            scanf("%d%d", &j, w+i);
            head[i] = son[j];
            son[j] = i;
        }
        memset(dp, 0, sizeof(dp));
        dfs(0);
        printf("%d\n", dp[0][m+1]);
    }
    return 0;
}
思路：自己建立一个根root，使森林的根都成为root的孩子，然后树形dfs+简单背包

0-1背包裸代码：
for?i=1..N
????for?v=V..0
????????f[v]=max{f[v],f[v-c[i]]+w[i]};
状态转移方程：f[root][k]=max(f[root][k],f[root][k-j]+dp[u][j]);
m是个数，j是存几个，f[i][j]表示的是以i为根攻克j个城堡（且这j个城堡必须是它子树上的，不包括它本身），dp[i][j]表示的是是以i为根攻克j个城堡（且这j个城堡必须是它子树上的，一定它本身，ans[i]表示每个城堡的宝物，所以一定有dp[i][1]=ans[i];）。
for(int?k=m;k>=0;k--)
for(int?j=0;j<=k;j++)
???? f[root][k]=max(f[root][k],f[root][k-j]+dp[u][j]);
更新f[root][0~m]数组，然后全部更新完之后更新dp[root][0~m]。
如图所示样例2，先从root即0点访问3，3没有孩子，执行更新dp操作，因为所以叶子都满足dp[i][0~m]=ans[i]，所以dp[3][0~m]都等于ans[3]，以下同理。
返回到root，更新f[0][m~0]。
访问root-->2-->7-->6，访问到叶子，更新dp[6][0~m]。返回7，更新f[7][m~0]，
从7-->5，更新叶子节点dp[5][0~m]，
从5-->7，再次更新f[7][m~0]，
从7-->2，更新dp[7][0~m]，返回2节点，更新f[2][m~0]，
从2-->4，更新叶子节点dp[4][0~m]，
从4-->2，更新f[2][m~0]，
从2-->1，更新dp[1][0~m]，
从1-->2，更新f[2][m~0]，
从2-->root,更新dp[2][0~m]，
更新f[0][m~0]，更新dp[0][0~m]。

#include<stdio.h>
#include<string.h>
#define N 205
int n,m,edgeNum=0;
int ans[N],dp[N][N],f[N][N];
int visit[N],head[N];
struct Line{int v,next;}edge[N];
int max(int a,int b){return a>b?a:b;}
void add(int u,int v)
{
    edge[edgeNum].v=v;
    edge[edgeNum].next=head[u];
    head[u]=edgeNum++;
}
void dfs(int root)
{
    visit[root]=1;
    for(int i=head[root];i!=-1;i=edge[i].next)
    {
        int u=edge[i].v;
        if(!visit[u])
        {
            dfs(u);
            for(int k=m;k>=0;k--)
              for(int j=0;j<=k;j++)
              f[root][k]=max(f[root][k],f[root][k-j]+dp[u][j]);
        }
    }
    for(int i=1;i<=m+1;i++)
      dp[root][i]=f[root][i-1]+ans[root];
}
int main()
{
    int a,b;
    while(scanf("%d%d",&n,&m)!=EOF)
    {
        if(n==0&&m==0) break;
        edgeNum=ans[0]=0;
        memset(f,0,sizeof(f));
        memset(dp,0,sizeof(dp));
        memset(head,-1,sizeof(head));
        memset(visit,0,sizeof(visit));
        for(int i=1;i<=n;i++)
        {
            scanf("%d%d",&a,&b);
            ans[i]=b;
            add(a,i);
        }
        dfs(0);
        printf("%d\n",dp[0][m+1]);
    }
}
4
2
1
4
1
1
6
2
-->0
-->3
dp[3][1] 4=f[3][0] 0+ans[3] 4

dp[3][2] 4=f[3][1] 0+ans[3] 4

dp[3][3] 4=f[3][2] 0+ans[3] 4

dp[3][4] 4=f[3][3] 0+ans[3] 4

dp[3][5] 4=f[3][4] 0+ans[3] 4

f[0][4] 4=max(f[0][4] 0,f[0][3] 0+dp[3][1] 4
f[0][4] 4=max(f[0][4] 4,f[0][2] 0+dp[3][2] 4
f[0][4] 4=max(f[0][4] 4,f[0][1] 0+dp[3][3] 4
f[0][4] 4=max(f[0][4] 4,f[0][0] 0+dp[3][4] 4

f[0][3] 4=max(f[0][3] 0,f[0][2] 0+dp[3][1] 4
f[0][3] 4=max(f[0][3] 4,f[0][1] 0+dp[3][2] 4
f[0][3] 4=max(f[0][3] 4,f[0][0] 0+dp[3][3] 4

f[0][2] 4=max(f[0][2] 0,f[0][1] 0+dp[3][1] 4
f[0][2] 4=max(f[0][2] 4,f[0][0] 0+dp[3][2] 4

f[0][1] 4=max(f[0][1] 0,f[0][0] 0+dp[3][1] 4


-->2
-->7
-->6
dp[6][1] 6=f[6][0] 0+ans[6] 6

dp[6][2] 6=f[6][1] 0+ans[6] 6

dp[6][3] 6=f[6][2] 0+ans[6] 6

dp[6][4] 6=f[6][3] 0+ans[6] 6

dp[6][5] 6=f[6][4] 0+ans[6] 6

f[7][4] 6=max(f[7][4] 0,f[7][3] 0+dp[6][1] 6
f[7][4] 6=max(f[7][4] 6,f[7][2] 0+dp[6][2] 6
f[7][4] 6=max(f[7][4] 6,f[7][1] 0+dp[6][3] 6
f[7][4] 6=max(f[7][4] 6,f[7][0] 0+dp[6][4] 6

f[7][3] 6=max(f[7][3] 0,f[7][2] 0+dp[6][1] 6
f[7][3] 6=max(f[7][3] 6,f[7][1] 0+dp[6][2] 6
f[7][3] 6=max(f[7][3] 6,f[7][0] 0+dp[6][3] 6

f[7][2] 6=max(f[7][2] 0,f[7][1] 0+dp[6][1] 6
f[7][2] 6=max(f[7][2] 6,f[7][0] 0+dp[6][2] 6

f[7][1] 6=max(f[7][1] 0,f[7][0] 0+dp[6][1] 6


-->5
dp[5][1] 1=f[5][0] 0+ans[5] 1

dp[5][2] 1=f[5][1] 0+ans[5] 1

dp[5][3] 1=f[5][2] 0+ans[5] 1

dp[5][4] 1=f[5][3] 0+ans[5] 1

dp[5][5] 1=f[5][4] 0+ans[5] 1

f[7][4] 7=max(f[7][4] 6,f[7][3] 6+dp[5][1] 1
f[7][4] 7=max(f[7][4] 7,f[7][2] 6+dp[5][2] 1
f[7][4] 7=max(f[7][4] 7,f[7][1] 6+dp[5][3] 1
f[7][4] 7=max(f[7][4] 7,f[7][0] 0+dp[5][4] 1

f[7][3] 7=max(f[7][3] 6,f[7][2] 6+dp[5][1] 1
f[7][3] 7=max(f[7][3] 7,f[7][1] 6+dp[5][2] 1
f[7][3] 7=max(f[7][3] 7,f[7][0] 0+dp[5][3] 1

f[7][2] 7=max(f[7][2] 6,f[7][1] 6+dp[5][1] 1
f[7][2] 7=max(f[7][2] 7,f[7][0] 0+dp[5][2] 1

f[7][1] 6=max(f[7][1] 6,f[7][0] 0+dp[5][1] 1


dp[7][1] 2=f[7][0] 0+ans[7] 2

dp[7][2] 8=f[7][1] 6+ans[7] 2

dp[7][3] 9=f[7][2] 7+ans[7] 2

dp[7][4] 9=f[7][3] 7+ans[7] 2

dp[7][5] 9=f[7][4] 7+ans[7] 2

f[2][4] 2=max(f[2][4] 0,f[2][3] 0+dp[7][1] 2
f[2][4] 8=max(f[2][4] 2,f[2][2] 0+dp[7][2] 8
f[2][4] 9=max(f[2][4] 8,f[2][1] 0+dp[7][3] 9
f[2][4] 9=max(f[2][4] 9,f[2][0] 0+dp[7][4] 9

f[2][3] 2=max(f[2][3] 0,f[2][2] 0+dp[7][1] 2
f[2][3] 8=max(f[2][3] 2,f[2][1] 0+dp[7][2] 8
f[2][3] 9=max(f[2][3] 8,f[2][0] 0+dp[7][3] 9

f[2][2] 2=max(f[2][2] 0,f[2][1] 0+dp[7][1] 2
f[2][2] 8=max(f[2][2] 2,f[2][0] 0+dp[7][2] 8

f[2][1] 2=max(f[2][1] 0,f[2][0] 0+dp[7][1] 2


-->4
dp[4][1] 1=f[4][0] 0+ans[4] 1

dp[4][2] 1=f[4][1] 0+ans[4] 1

dp[4][3] 1=f[4][2] 0+ans[4] 1

dp[4][4] 1=f[4][3] 0+ans[4] 1

dp[4][5] 1=f[4][4] 0+ans[4] 1

f[2][4] 10=max(f[2][4] 9,f[2][3] 9+dp[4][1] 1
f[2][4] 10=max(f[2][4] 10,f[2][2] 8+dp[4][2] 1
f[2][4] 10=max(f[2][4] 10,f[2][1] 2+dp[4][3] 1
f[2][4] 10=max(f[2][4] 10,f[2][0] 0+dp[4][4] 1

f[2][3] 9=max(f[2][3] 9,f[2][2] 8+dp[4][1] 1
f[2][3] 9=max(f[2][3] 9,f[2][1] 2+dp[4][2] 1
f[2][3] 9=max(f[2][3] 9,f[2][0] 0+dp[4][3] 1

f[2][2] 8=max(f[2][2] 8,f[2][1] 2+dp[4][1] 1
f[2][2] 8=max(f[2][2] 8,f[2][0] 0+dp[4][2] 1

f[2][1] 2=max(f[2][1] 2,f[2][0] 0+dp[4][1] 1


-->1
dp[1][1] 2=f[1][0] 0+ans[1] 2

dp[1][2] 2=f[1][1] 0+ans[1] 2

dp[1][3] 2=f[1][2] 0+ans[1] 2

dp[1][4] 2=f[1][3] 0+ans[1] 2

dp[1][5] 2=f[1][4] 0+ans[1] 2

f[2][4] 11=max(f[2][4] 10,f[2][3] 9+dp[1][1] 2
f[2][4] 11=max(f[2][4] 11,f[2][2] 8+dp[1][2] 2
f[2][4] 11=max(f[2][4] 11,f[2][1] 2+dp[1][3] 2
f[2][4] 11=max(f[2][4] 11,f[2][0] 0+dp[1][4] 2

f[2][3] 10=max(f[2][3] 9,f[2][2] 8+dp[1][1] 2
f[2][3] 10=max(f[2][3] 10,f[2][1] 2+dp[1][2] 2
f[2][3] 10=max(f[2][3] 10,f[2][0] 0+dp[1][3] 2

f[2][2] 8=max(f[2][2] 8,f[2][1] 2+dp[1][1] 2
f[2][2] 8=max(f[2][2] 8,f[2][0] 0+dp[1][2] 2

f[2][1] 2=max(f[2][1] 2,f[2][0] 0+dp[1][1] 2


dp[2][1] 1=f[2][0] 0+ans[2] 1

dp[2][2] 3=f[2][1] 2+ans[2] 1

dp[2][3] 9=f[2][2] 8+ans[2] 1

dp[2][4] 11=f[2][3] 10+ans[2] 1

dp[2][5] 12=f[2][4] 11+ans[2] 1

f[0][4] 5=max(f[0][4] 4,f[0][3] 4+dp[2][1] 1
f[0][4] 7=max(f[0][4] 5,f[0][2] 4+dp[2][2] 3
f[0][4] 13=max(f[0][4] 7,f[0][1] 4+dp[2][3] 9
f[0][4] 13=max(f[0][4] 13,f[0][0] 0+dp[2][4] 11

f[0][3] 5=max(f[0][3] 4,f[0][2] 4+dp[2][1] 1
f[0][3] 7=max(f[0][3] 5,f[0][1] 4+dp[2][2] 3
f[0][3] 9=max(f[0][3] 7,f[0][0] 0+dp[2][3] 9

f[0][2] 5=max(f[0][2] 4,f[0][1] 4+dp[2][1] 1
f[0][2] 5=max(f[0][2] 5,f[0][0] 0+dp[2][2] 3

f[0][1] 4=max(f[0][1] 4,f[0][0] 0+dp[2][1] 1


dp[0][1] 0=f[0][0] 0+ans[0] 0

dp[0][2] 4=f[0][1] 4+ans[0] 0

dp[0][3] 5=f[0][2] 5+ans[0] 0

dp[0][4] 9=f[0][3] 9+ans[0] 0

dp[0][5] 13=f[0][4] 13+ans[0] 0