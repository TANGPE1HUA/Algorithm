注意可能有重复的字母，如choose
#include<iostream>
#include<cstring>
#include<string>
#include<set>
using namespace std;
char s[30][30];
bool vis[30][30];
multiset<char> st;
int main()
{
	int T,n;
	cin>>T;
	while(T--)
	{
		cin>>n;
		st.clear();
		memset(vis,0,sizeof(vis));
		for(int i=0;i<n;i++)
		cin>>s[i];
		for(int i=0;i<12;i++)
		{
			bool flag=true;
			for(int j=1;j<n;j++)
			{
				bool it=false;
				for(int k=0;k<12;k++)
				{
					if(!vis[j][k]&&s[0][i]==s[j][k])
					{
						vis[j][k]=1;
						it=true;
						break;
					}
					
				}
				if(!it)
				{
					flag=false;
					break;
				}
			}
			if(flag)
			st.insert(s[0][i]);	
		}
		multiset<char>::iterator itt;
		for(itt=st.begin();itt!=st.end();itt++)
		cout<<*itt;
		cout<<endl;
	}
}

另一种解法，时间空间占用都很少。
统计每个字母应该出现的次数，输出这n个下来最min的值即可
1.#include?<iostream>??
2.#include?<stdio.h>??
3.#include?<cstring>??
4.??
5.using?namespace?std;??
6.??
7.const?int?MAX_N?=?12?+?2;??
8.const?int?INF?=?(1?<<?30);??
9.char?str[MAX_N];??
10.int?n,?T;??
11.int?letter[MAX_N?<<?1];??
12.int?res[MAX_N?<<?1];??
13.??
14.int?main()??
15.{??
16.????cin?>>?T;??
17.????while(T--)??
18.????{??
19.????????for(int?i?=?0;?i?<?26;?i++)??
20.????????????res[i]?=?INF;??
21.????????cin?>>?n;??
22.????????for(int?i?=?0;?i?<?n;?i++)??
23.????????{??
24.????????????cin?>>?str;??
25.????????????memset(letter,?0,?sizeof(letter));??
26.????????????for(int?j?=?0;?j?<?12;?j++)??
27.????????????????letter[str[j]?-?'A']++;??
28.????????????for(int?j?=?0;?j?<?26;?j++)??
29.????????????????res[j]?=?min(res[j],?letter[j]);??
30.????????}??
31.????????for(int?i?=?0;?i?<?26;?i++)??
32.????????{??
33.????????????for(int?j?=?0;?j?<?res[i];?j++)??
34.????????????????cout?<<?(char)(i?+?'A');??
35.????????}??
36.????????cout?<<?endl;??
37.????}??
38.????return?0;??
39.}??
