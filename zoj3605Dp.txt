
Dp，还是三维的。
思路：用DP[m][k][n] 表示 m次交换，知道了其中的k次，结尾为n的方案数
初始化的时候要特别注意，否则会wa的很惨。
? ? 另外，这道题目，可能性以1为单位的话，2^50，要用 long long！！！

#include<iostream>
#include<string>
#include<cstring>
#include<algorithm>
using namespace std;
long long  dp[100][100][100];
struct node
{
	int a;
	int b;
}N[60];
int main()
{
   int T,n,m,k,s;
   cin>>T;
   while(T--)
   {
   	 cin>>n>>m>>k>>s;
   	 for(int i=1;i<=m;i++)
   	 cin>>N[i].a>>N[i].b;
 	 memset(dp,0,sizeof(dp));
 	/* for(int i=0;i<=m;i++)//不能这样复制，因为后面递推的时候会被影响。
 	 dp[i][0][s]=1;*/
 	 dp[0][0][s]=1;
 	 for(int i=1;i<=m;i++)
 	 for(int j=0;j<=i&&j<=k;j++)
 	 {
 	 	if(j){
 	   for(int w=1;w<=n;w++)
 	   { 
	    if(N[i].a==w)
 	 	{
	 	 	dp[i][j][N[i].a]+=dp[i-1][j-1][N[i].b];
	 	 }
	 	 else if(N[i].b==w)
	 	 {
 	 		dp[i][j][N[i].b]+=dp[i-1][j-1][N[i].a];
 	 	 }
 	 	 else
  	     {
 	 	   // dp[i][j][w]+=dp[i-1][j][w];
            dp[i][j][w]+=dp[i-1][j-1][w];	
 	 	 }
 	 	 } 
 	 	}
 	 	for(int w=1;w<=n;w++)
 	 	dp[i][j][w]+=dp[i-1][j][w];
 	 }
 	 long long ans=-1,res;
 	 for(int i=1;i<=n;i++)
 	 {
 	 	if(dp[m][k][i]>ans)
 	 	{
	 	 	ans=dp[m][k][i];
	 	 	res=i;
	 	 }
 	 }
 	 cout<<res<<endl;
   }	
   return 0;
} 