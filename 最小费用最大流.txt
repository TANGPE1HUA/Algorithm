
#include <iostream>
#include <queue>
#include <climits>
#include <cstring>
#include <cstdio>
#include <algorithm> 
using namespace std;
#define INF INT_MAX
#define MAXV 1100
#define MAXM 40100

struct Edge{
	int s,t,next,w,r;
};

Edge edge[MAXM];
int source,sink,n,m,mincost,edgesum;
int head[MAXV],d[MAXV],parent[MAXV];
//addedge（起点，终点，费用，容量） 
void addedge(int a,int b,int c,int r){
	edge[edgesum].s=a;
	edge[edgesum].t=b;
	edge[edgesum].r=r;
	edge[edgesum].w=c;
	edge[edgesum].next=head[a];
	head[a]=edgesum++;

	edge[edgesum].s=b;
	edge[edgesum].t=a;
	edge[edgesum].r=0;
	edge[edgesum].w=-c;
	edge[edgesum].next=head[b];
	head[b]=edgesum++;
}

int spfa(){
	queue <int>q;
	int v,i,tmp;
	bool vis[MAXV];
	
	for(i=0;i<=sink;i++) d[i]=INF;
	memset(vis,false,sizeof(vis));
	memset(parent,-1,sizeof(parent));

	q.push(source);
	vis[source]=true;
	d[source]=0;
	while(!q.empty()){
		v=q.front();q.pop();
		vis[v]=false;

		for(i=head[v];i!=-1;i=edge[i].next){
			tmp=edge[i].t;
			if(edge[i].r && edge[i].w+d[v]<d[tmp]){
				d[tmp]=edge[i].w+d[v];
				parent[tmp]=i;
				if(!vis[tmp]){
					q.push(tmp);
					vis[tmp]=true;
				}
			}
		}
	}
	return 0;
}

void MCMF(){
	int u;
	mincost=0;
	while(1){
		spfa();
		if(parent[sink]==-1) break;

		u=parent[sink];		//这里不用求出增光路径上的最小流量
        while(u!=-1){		//因为最小流量一定为1
			edge[u].r--;
			edge[u^1].r++;
            u=parent[edge[u].s];
        }
        mincost+=d[sink];
	}
}

int main(){
	int i,a,b,c;
	while(~scanf("%d%d",&n,&m)){
		memset(head,-1,sizeof(head));
		
		edgesum=0;//边数初始化为0 
		source=0,sink=n+1;//source超级源点， sink超级汇点 
		for(i=1;i<=m;i++){
			scanf("%d%d%d",&a,&b,&c);
			addedge(a,b,c,1);
			addedge(b,a,c,1);
		}
		addedge(source,1,0,2);
		addedge(n,sink,0,2);

		MCMF();
		printf("%d\n",mincost);
	}
	return 0;
}