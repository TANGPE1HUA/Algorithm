 //如果i条直线有j个交点，则dp[i][j]=1，这样记录比较好 
 #include<iostream>
 #include<string.h>
 using namespace std;
 int dp[21][200];
 int i,j,k;
 int main()
 {
     	memset(dp,0,sizeof(dp));
	 	for(i=0;i<=20;i++)
	 	dp[i][0]=1;
	  // dp[2][1]=1;
	     for(i=2;i<=20;i++)
	     for(j=0;j<=i;j++)//j条平行线 
	     for(k=0;k<200;k++)
	     {
     		if(dp[i-j][k]==1)//按平行线的条数分， 
     		dp[i][k+j*(i-j)]=1;
     	 }
     	 for(int n;cin>>n;)
    	 { 
		  int first=0;
     	  for(i=0;i<=n*(n-1)/2;i++)
     	  {
     	 	
 	      	if(dp[n][i]==1)
 	     	{
 	      		cout<<(first++?" ":"");
 	     		cout<<i;	     	 	
	     	 }
 	     }
 	     cout<<endl;
    }
    return 0;
 }

* dp:
 * 如果i条线可以相加出j个交点，那么记f[i][j]=1；否则f[i][j]=0。
 * 当n=1时，方案为0
 * 当n=2时，方案为0，1
 * 当n=3时，方案为0，2，3
 * 当n=4时，4条平行：方案为0
 *         3条平行：方案为3
 *         2条平行：方案为4，5
 *         1条平行：方案为6
 * 。。。
 * 当n=k时，k条平行：方案为0
 *         k-1条平行：方案为k-1
 *         k-2条平行：方案为2*(k-2)+0,2*(k-2)+1
 *         k-3条平行：方案为3*(k-3)+0,3*(k-3)+2,3*(k-3)+3
 *         。。。
 *         k-i条平行：方案为{i*(k-i)+u} (k>i,f[i][u]=1)
 *         以上的方案有可能有重复，因为我们只统计有可能出现的方案，因此不会影响到最后的输出。
 */