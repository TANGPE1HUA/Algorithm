#include<iostream>
#include<string>
#include<string.h>
#include<algorithm>
using namespace std;

int s[1<<16];
int sum[16][1<<16];
int dp[16][1<<16];//代表2的16次方（2<<16代表2的16次方*2）
int map[16][16];//代表16>>1代表16除以2,16>>2代表16除以2再除以2

int n,m,ans;

void solve()
{
	m=0;
	for(int i=0;i<(1<<n);i++)
	{
		if((i&(i<<1))==0)
		s[m++]=i;//所有合法的状态 
	}
	memset(sum,0,sizeof(sum));
	memset(dp,0,sizeof(dp));
	for(int i=0;i<n;i++)
	for(int j=0;j<m;j++)
	for(int k=0;k<n;k++)//此状态下的和
	{
		if(s[j]&(1<<k))
		sum[i][j]+=map[i][k];//每一行合法状态下所有数的和 
	}
	for(int i=0;i<m;i++)
	dp[0][i]=sum[0][i];
	for(int i=1;i<n;i++)
	for(int j=0;j<m;j++)
	for(int k=0;k<m;k++)//上一行的状态 
	{
		if(s[j]&s[k])continue;
		 if(s[j]&(s[k]>>1))continue;
		 if(s[j]&(s[k]<<1)) continue;
		 dp[i][j]=max(dp[i][j],dp[i-1][k]+sum[i][j]);
	}
	ans=0;
	for(int i=0;i<m;i++)
	ans=max(ans,dp[n-1][i]);
	cout<<ans<<endl;
}
int main()
{
	char str[111];
	while(gets(str))
	{
		int len=strlen(str);
		n=0;
		for(int i=0;i<len;i+=3)
		{
			map[0][n++]=(str[i]-'0')*10+(str[i+1]-'0');
		}
		for(int i=1;i<n;i++)
		{
			int nn=0;
			gets(str);
			for(int j=0;j<len;j+=3)
			{
				map[i][nn++]=(str[j]-'0')*10+(str[j+1]-'0');
			}
		}
		solve();
		getchar();
	}
	return 0;
}